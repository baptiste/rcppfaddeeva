// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppFaddeeva.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// Faddeeva_w
std::vector< std::complex<double> > Faddeeva_w(const std::vector< std::complex<double> >& z, double relerr);
static SEXP RcppFaddeeva_Faddeeva_w_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(Faddeeva_w(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppFaddeeva_Faddeeva_w(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppFaddeeva_Faddeeva_w_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erfcx
std::vector< std::complex<double> > erfcx(const std::vector< std::complex<double> >& z, double relerr);
static SEXP RcppFaddeeva_erfcx_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erfcx(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppFaddeeva_erfcx(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppFaddeeva_erfcx_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erf
std::vector< std::complex<double> > erf(const std::vector< std::complex<double> >& z, double relerr);
static SEXP RcppFaddeeva_erf_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erf(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppFaddeeva_erf(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppFaddeeva_erf_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erfi
std::vector< std::complex<double> > erfi(const std::vector< std::complex<double> >& z, double relerr);
static SEXP RcppFaddeeva_erfi_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erfi(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppFaddeeva_erfi(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppFaddeeva_erfi_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erfc
std::vector< std::complex<double> > erfc(const std::vector< std::complex<double> >& z, double relerr);
static SEXP RcppFaddeeva_erfc_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erfc(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppFaddeeva_erfc(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppFaddeeva_erfc_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Dawson
std::vector< std::complex<double> > Dawson(const std::vector< std::complex<double> >& z, double relerr);
static SEXP RcppFaddeeva_Dawson_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(Dawson(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppFaddeeva_Dawson(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppFaddeeva_Dawson_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int RcppFaddeeva_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::vector< std::complex<double> >(*Faddeeva_w)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erfcx)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erf)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erfi)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erfc)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*Dawson)(const std::vector< std::complex<double> >&,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RcppFaddeeva_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_Faddeeva_w", (DL_FUNC)RcppFaddeeva_Faddeeva_w_try);
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_erfcx", (DL_FUNC)RcppFaddeeva_erfcx_try);
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_erf", (DL_FUNC)RcppFaddeeva_erf_try);
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_erfi", (DL_FUNC)RcppFaddeeva_erfi_try);
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_erfc", (DL_FUNC)RcppFaddeeva_erfc_try);
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_Dawson", (DL_FUNC)RcppFaddeeva_Dawson_try);
    R_RegisterCCallable("RcppFaddeeva", "RcppFaddeeva_RcppExport_validate", (DL_FUNC)RcppFaddeeva_RcppExport_validate);
    return R_NilValue;
}
